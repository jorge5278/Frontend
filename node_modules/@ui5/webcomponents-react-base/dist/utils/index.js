import { getEffectiveScopingSuffixForTag } from '@ui5/webcomponents-base/dist/CustomElementsScope.js';
export const deprecationNotice = (component, message) => {
    if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
        const value = `*** ui5-webcomponents-react Deprecation Notice - ${component} ***\n`;
        if (console && console.warn) {
            console.warn(`${value}${message}`);
        }
    }
};
export const enrichEventWithDetails = (event, payload) => {
    if (!event) {
        return event;
    }
    // Determine if we need to create a new details object
    const shouldCreateNewDetails = event.detail === null || event.detail === undefined || typeof event.detail !== 'object';
    // native detail is always number (if available)
    const nativeDetail = typeof event.detail === 'number' ? event.detail : null;
    // defineProperty is necessary here as event.detail needs to be editable
    Object.defineProperty(event, 'detail', {
        value: shouldCreateNewDetails ? {} : event.detail,
        writable: true,
        configurable: true
    });
    if (nativeDetail) {
        Object.assign(event.detail, { nativeDetail });
    }
    Object.assign(event.detail, payload);
    return event;
};
export function getUi5TagWithSuffix(baseTagName) {
    const tagNameSuffix = getEffectiveScopingSuffixForTag(baseTagName);
    return tagNameSuffix ? `${baseTagName}-${tagNameSuffix}` : baseTagName;
}
export { debounce } from './debounce.js';
export { throttle } from './throttle.js';
export const capitalizeFirstLetter = (s) => s.charAt(0).toUpperCase() + s.slice(1);
export const lowercaseFirstLetter = (s) => s.charAt(0).toLowerCase() + s.slice(1);
export const camelToKebabCase = (s) => s.replace(/([A-Z])/g, (a, b) => `-${b.toLowerCase()}`);
export const kebabToCamelCase = (str) => str.replace(/([-_]\w)/g, (g) => g[1].toUpperCase());
const SEMVER_REGEX = /^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
export function parseSemVer(version) {
    const parsed = SEMVER_REGEX.exec(version).groups;
    return {
        version,
        major: parseInt(parsed.major),
        minor: parseInt(parsed.minor),
        patch: parseInt(parsed.patch),
        prerelease: parsed.prerelease,
        buildMetadata: parsed.buildmetadata
    };
}
