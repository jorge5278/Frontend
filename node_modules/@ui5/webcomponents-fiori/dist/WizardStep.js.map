{"version":3,"file":"WizardStep.js","sourceRoot":"","sources":["../src/WizardStep.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,UAAU,MAAM,4CAA4C,CAAC;AACpE,OAAO,aAAa,MAAM,0DAA0D,CAAC;AACrF,OAAO,QAAQ,MAAM,qDAAqD,CAAC;AAE3E;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAGH,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,UAAU;IAAnC;;QAoCC;;;;;;;;WAQG;QAEH,aAAQ,GAAG,KAAK,CAAC;QAEjB;;;;;;;WAOG;QAEH,aAAQ,GAAG,KAAK,CAAC;QAEjB;;;;;;;;WAQG;QAEH,cAAS,GAAG,KAAK,CAAC;IAInB,CAAC;CAAA,CAAA;AA/DA;IADC,QAAQ,EAAE;6CACO;AAWlB;IADC,QAAQ,EAAE;gDACU;AAarB;IADC,QAAQ,EAAE;wCACE;AAYb;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;4CACX;AAWjB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;4CACX;AAYjB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;6CACV;AArEb,UAAU;IADf,aAAa,CAAC,iBAAiB,CAAC;GAC3B,UAAU,CAyEf;AAED,UAAU,CAAC,MAAM,EAAE,CAAC;AAEpB,eAAe,UAAU,CAAC","sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport customElement from \"@ui5/webcomponents-base/dist/decorators/customElement.js\";\nimport property from \"@ui5/webcomponents-base/dist/decorators/property.js\";\n\n/**\n * @class\n *\n * ### Overview\n *\n * A component that represents a logical step as part of the `ui5-wizard`.\n * It is meant to aggregate arbitrary HTML elements that form the content of a single step.\n *\n * ### Structure\n *\n * - Each wizard step has arbitrary content.\n * - Each wizard step might have texts - defined by the `titleText` and `subtitleText` properties.\n * - Each wizard step might have an icon - defined by the `icon` property.\n * - Each wizard step might display a number in place of the `icon`, when it's missing.\n *\n * ### Usage\n * The `ui5-wizard-step` component should be used only as slot of the `ui5-wizard` component\n * and should not be used standalone.\n * @constructor\n * @extends UI5Element\n * @abstract\n * @since 1.0.0-rc.10\n * @public\n * @slot {Node[]} default - Defines the step content.\n */\n\n@customElement(\"ui5-wizard-step\")\nclass WizardStep extends UI5Element {\n\t/**\n\t * Defines the `titleText` of the step.\n\t *\n\t * **Note:** The text is displayed in the `ui5-wizard` navigation header.\n\t * @default undefined\n\t * @public\n\t * @since 1.0.0-rc.15\n\t */\n\t@property()\n\ttitleText?: string\n\n\t/**\n\t * Defines the `subtitleText` of the step.\n\t *\n\t * **Note:** the text is displayed in the `ui5-wizard` navigation header.\n\t * @default undefined\n\t * @public\n\t * @since 1.0.0-rc.15\n\t */\n\t@property()\n\tsubtitleText?: string\n\n\t/**\n\t * Defines the `icon` of the step.\n\t *\n\t * **Note:** The icon is displayed in the `ui5-wizard` navigation header.\n\t *\n\t * The SAP-icons font provides numerous options.\n\t * See all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).\n\t * @default undefined\n\t * @public\n\t */\n\t@property()\n\ticon?: string\n\n\t/**\n\t * Defines if the step is `disabled`. When disabled the step is displayed,\n\t * but the user can't select the step by clicking or navigate to it with scrolling.\n\t *\n\t * **Note:** Step can't be `selected` and `disabled` at the same time.\n\t * In this case the `selected` property would take precedence.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tdisabled = false;\n\n\t/**\n\t * Defines the step's `selected` state - the step that is currently active.\n\t *\n\t * **Note:** Step can't be `selected` and `disabled` at the same time.\n\t * In this case the `selected` property would take precedence.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tselected = false;\n\n\t/**\n\t * When `branching` is enabled a dashed line would be displayed after the step,\n\t * meant to indicate that the next step is not yet known and depends on user choice in the current step.\n\t *\n\t * **Note:** It is recommended to use `branching` on the last known step\n\t * and later add new steps when it becomes clear how the wizard flow should continue.\n\t * @default false\n\t * @public\n\t */\n\t@property({ type: Boolean })\n\tbranching = false;\n\n\tstretch?: boolean;\n\tstepContentAriaLabel?: string;\n}\n\nWizardStep.define();\n\nexport default WizardStep;\n"]}