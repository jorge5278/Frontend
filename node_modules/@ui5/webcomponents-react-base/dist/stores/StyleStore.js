import { getCurrentRuntimeIndex } from '@ui5/webcomponents-base/dist/Runtimes.js';
globalThis['@ui5/webcomponents-react'] ??= {};
const STORE_LOCATION = globalThis['@ui5/webcomponents-react'];
function getStyleStoreListenersSymbol() {
    return Symbol.for(`@ui5/webcomponents-react/StyleStore-${getCurrentRuntimeIndex()}/Listeners`);
}
function getStyleStoreSymbol() {
    return Symbol.for(`@ui5/webcomponents-react/StyleStore-${getCurrentRuntimeIndex()}`);
}
const initialStore = {
    staticCssInjected: false,
    componentsMap: new Map()
};
function getListeners() {
    STORE_LOCATION[getStyleStoreListenersSymbol()] ??= [];
    return STORE_LOCATION[getStyleStoreListenersSymbol()];
}
function emitChange() {
    for (const listener of getListeners()) {
        listener();
    }
}
function getSnapshot() {
    STORE_LOCATION[getStyleStoreSymbol()] ??= initialStore;
    return STORE_LOCATION[getStyleStoreSymbol()];
}
function subscribe(listener) {
    const listeners = getListeners();
    listeners.push(listener);
    return () => {
        const updatedListeners = getListeners();
        const index = updatedListeners.indexOf(listener);
        if (index !== -1) {
            updatedListeners.splice(index, 1);
        }
    };
}
export const StyleStore = {
    subscribe,
    getSnapshot,
    getServerSnapshot: () => {
        return initialStore;
    },
    setStaticCssInjected: (staticCssInjected) => {
        const curr = getSnapshot();
        STORE_LOCATION[getStyleStoreSymbol()] = {
            ...curr,
            staticCssInjected
        };
        emitChange();
    },
    mountComponent: (componentName) => {
        const { componentsMap } = getSnapshot();
        if (componentsMap.has(componentName)) {
            componentsMap.set(componentName, componentsMap.get(componentName) + 1);
        }
        else {
            componentsMap.set(componentName, 1);
        }
        emitChange();
    },
    unmountComponent: (componentName) => {
        const { componentsMap } = getSnapshot();
        if (componentsMap.has(componentName)) {
            componentsMap.set(componentName, componentsMap.get(componentName) - 1);
        }
        emitChange();
    }
};
